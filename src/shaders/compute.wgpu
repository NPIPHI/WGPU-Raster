@group(0) @binding(0)
var input_image : texture_2d<f32>;

@group(0) @binding(1)
var output_image : texture_storage_2d<rgba8unorm, write>;

override dimx: u32;
override dimy: u32;

fn reduce(a: vec4f, b: vec4f) -> vec4f {
  return vec4f(a.xyz+b.xyz,min(a.w,b.w));
}

@compute @workgroup_size(dimx, dimy)
fn main(
  @builtin(global_invocation_id)
  global_id : vec3u,

  @builtin(local_invocation_id)
  local_id : vec3u,
) {
  let dims = textureDimensions(output_image);
  if(global_id.x >= dims.x || global_id.y >= dims.y){
    return;
  }
  var val = vec4f(0,0,0,1);
  for(var x:u32 = 0; x < 2; x++){
    for(var y:u32 = 0; y < 2; y++){
      val = reduce(val, textureLoad(input_image, global_id.xy*2+vec2u(x,y), 0));
    }
  }
  textureStore(output_image, global_id.xy, vec4f(val.xyz/4.0, val.w));
}